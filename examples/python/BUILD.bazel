load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_img//img:image.bzl", "image_manifest")
load("@rules_img//img:push.bzl", "image_push")
load("@pip//:requirements.bzl", "requirement")
load("//:defs.bzl", "py_image_config")

# Rule to compile requirements.txt to requirements_lock.txt with all transitive deps
compile_pip_requirements(
    name = "requirements",
    src = "requirements.txt",
    requirements_txt = "requirements_lock.txt",
)

# Library for JSON processing
py_library(
    name = "json_lib",
    srcs = ["json_processor.py"],
    deps = [
        requirement("pyyaml"),
    ],
)

# Utility library for string operations
py_library(
    name = "utils_lib",
    srcs = ["string_utils.py"],
)

# Main application binary with real third-party dependencies
# Demonstrates:
# - Multiple py_library dependencies
# - External PyPI dependencies (Click, Requests, PyYAML, NumPy)
# - Data files (config and resources)
# - Proper layer separation (platform/external/application)
py_binary(
    name = "application",
    srcs = ["application.py"],
    main = "application.py",
    data = [
        "config/app.config",
        "resources/README.txt",
    ],
    deps = [
        ":json_lib",
        ":utils_lib",
        "//foobar/baz:baz_lib",
        requirement("bazel-runfiles"),
        requirement("click"),
        requirement("requests"),
        requirement("pyyaml"),
    ],
    python_version = "PY3",
)

py_image_config(
    name = "app_image_config",
    binary = ":application",
    interpreter = "/usr/bin/python3",
)

# Container image with FSManifestInfo demonstrating layer separation
# External layer: PyPI dependencies (Click, Requests, PyYAML, NumPy, etc.)
# Application layer: Application code, config, and resources
image_manifest(
    name = "application_image",
    base = "@distroless_python",  # Distroless Python base image with Python runtime
    layers = [
        ":application",  # FSManifestInfo from py_binary expands to categorized layers
    ],
    # Layer order: external deps, then application code
    fsmanifest_layer_order = ["external", "application"],
    config_fragment = ":app_image_config",  # Image config with entrypoint and env vars
)

# Push target for deploying to registry
image_push(
    name = "push",
    image = ":application_image",
    registry = "ghcr.io",
    repository = "malt3/fsmanifest-python-demo",
    tag = "latest",
)
